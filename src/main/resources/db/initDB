DROP TABLE IF EXISTS user_roles;
DROP TABLE IF EXISTS votes;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS dishes;
DROP TABLE IF EXISTS menu;
DROP TABLE IF EXISTS restaurants;
DROP SEQUENCE IF EXISTS GLOBAL_SEQ;
CREATE SEQUENCE GLOBAL_SEQ AS INTEGER START WITH 100000;

CREATE TABLE restaurants
(
    id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name            VARCHAR(255)            NOT NULL,
    added           TIMESTAMP DEFAULT now() NOT NULL
);
CREATE UNIQUE INDEX restaurants_unique_name_idx ON restaurants (name);

CREATE TABLE menu
(
    id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    date_time       TIMESTAMP       NOT NULL,
    restaurant_id   INTEGER         NOT NULL,
    FOREIGN KEY (restaurant_id) REFERENCES restaurants (id)
);

CREATE TABLE dishes
(
    id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name            VARCHAR(255)    NOT NULL,
    price           INTEGER         NOT NULL,
    menu_id         INTEGER         NOT NULL,
    FOREIGN KEY (menu_id) REFERENCES menu (id)
);
CREATE UNIQUE INDEX dishes_unique_name_menu_idx ON dishes (name, menu_id);

CREATE TABLE users
(
    id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name            VARCHAR(255)            NOT NULL,
    email           VARCHAR(255)            NOT NULL,
    password        VARCHAR(255)            NOT NULL,
    registered      TIMESTAMP DEFAULT now() NOT NULL,
    enabled         BOOLEAN DEFAULT TRUE    NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx ON users (email);

CREATE TABLE votes
(
    id              INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    date_time       TIMESTAMP DEFAULT now() NOT NULL,
    menu_id         INTEGER                 NOT NULL,
    user_id         INTEGER                 NOT NULL,
    FOREIGN KEY (menu_id) REFERENCES menu (id),
    FOREIGN KEY (user_id) REFERENCES users (id)
);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255),
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
)
